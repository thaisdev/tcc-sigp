// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VirtusGo.Core.Domain.Enums;
using VirtusGo.Core.Infra.Data.Context;

namespace VirtusGo.Core.Infra.Data.Migrations
{
    [DbContext(typeof(VirtusContext))]
    partial class VirtusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("VirtusGo.Core.Domain.Cidade.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODCID");

                    b.Property<int>("EstadoId")
                        .HasColumnName("CODEST");

                    b.Property<string>("NomeCidade")
                        .IsRequired()
                        .HasColumnName("NOMECID")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("TCS_CIDADE");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Empresa.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODEMP");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("CNPJ");

                    b.Property<int>("EnderecoId")
                        .HasColumnName("CODEND");

                    b.Property<string>("Inscri")
                        .IsRequired()
                        .HasColumnName("INSCRI");

                    b.Property<string>("Razao")
                        .IsRequired()
                        .HasColumnName("RAZAO");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("TCS_EMP");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Endereco.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODEND");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("BAIRRO")
                        .HasMaxLength(40);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("CEP")
                        .HasMaxLength(40);

                    b.Property<int>("CidadeId")
                        .HasColumnName("CODCID");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnName("LOGRADOURO")
                        .HasMaxLength(40);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnName("NUM");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("TCS_ENDERECO");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.EnderecoEstoque.EnderecoEstoque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODEND");

                    b.Property<string>("Coluna")
                        .IsRequired()
                        .HasColumnName("COLUNA");

                    b.Property<string>("DescricaoEndereco")
                        .IsRequired()
                        .HasColumnName("DESCREND");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnName("RUA");

                    b.HasKey("Id");

                    b.ToTable("TCS_ESTEND");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Estado.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODEST");

                    b.Property<string>("NomeEstado")
                        .IsRequired()
                        .HasColumnName("NOMEEST")
                        .HasMaxLength(40);

                    b.Property<string>("SiglaEstado")
                        .IsRequired()
                        .HasColumnName("SIGLAEST")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("TCS_ESTADO");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.ItemOrdemCarga.ItemOrdemCarga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODOC");

                    b.Property<int>("PedidoId")
                        .HasColumnName("CODPED");

                    b.Property<int>("Sequencia")
                        .HasColumnName("SEQUENCIA");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("TTS_OCITE");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.ItensPedidos.ItensPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODPED");

                    b.Property<int>("ProdutoId")
                        .HasColumnName("CODPROD");

                    b.Property<int>("Quantidade")
                        .HasColumnName("QTD");

                    b.Property<double>("ValorTotal")
                        .HasColumnName("VLRTOT");

                    b.Property<double>("ValorUnitario")
                        .HasColumnName("VLRUNIT");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("TTS_PEDITE");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Motoristas.Motorista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODMOT");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("CPF");

                    b.Property<string>("CategoriaCNH")
                        .IsRequired()
                        .HasColumnName("CATCNH");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnName("DTNASC");

                    b.Property<DateTime>("DataVencimentoCNH")
                        .HasColumnName("DTVENCCNHM");

                    b.Property<int>("EnderecoId")
                        .HasColumnName("CODEND");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOMEMOT");

                    b.Property<string>("NumeroCNH")
                        .IsRequired()
                        .HasColumnName("NROCNH");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnName("TEL");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("TCS_MOT");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.OrdemCarga.OrdemCarga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODOC");

                    b.Property<DateTime>("DataChegada")
                        .HasColumnName("DTCHEGADA");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnName("DTSAIDA");

                    b.Property<int>("MotoristaId")
                        .HasColumnName("CODMOT");

                    b.Property<int>("RotaId")
                        .HasColumnName("CODROTA");

                    b.Property<int>("VeiculoId")
                        .HasColumnName("CODVEI");

                    b.HasKey("Id");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("RotaId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("TTS_OC");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Parceiro.Parceiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODPAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("EMAIL")
                        .HasMaxLength(40);

                    b.Property<int>("EnderecoId")
                        .HasColumnName("CODEND");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOMEPAR")
                        .HasMaxLength(40);

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnName("CPF_CNPJ")
                        .HasMaxLength(14);

                    b.Property<string>("RgInscricaoEstadual")
                        .IsRequired()
                        .HasColumnName("RG_INCRIEST")
                        .HasMaxLength(12);

                    b.Property<string>("Site")
                        .HasColumnName("SITE")
                        .HasMaxLength(20);

                    b.Property<string>("Telefone")
                        .HasColumnName("TEL")
                        .HasMaxLength(20);

                    b.Property<int>("TipoPessoa");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("TCS_PAR");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Pedido.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODPED");

                    b.Property<DateTime>("DataNegociacaoPedido")
                        .HasColumnName("DTNEG");

                    b.Property<int>("EmpresaId")
                        .HasColumnName("CODEMP");

                    b.Property<int>("MotoristaId")
                        .HasColumnName("CODMOT");

                    b.Property<int>("ParceiroId")
                        .HasColumnName("CODPAR");

                    b.Property<string>("TipoPedido")
                        .IsRequired()
                        .HasColumnName("TIPO");

                    b.Property<int>("UsuarioId")
                        .HasColumnName("CODUSU");

                    b.Property<int>("VendedorCompradorId")
                        .HasColumnName("CODVENCCOMP");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("MotoristaId");

                    b.HasIndex("ParceiroId");

                    b.ToTable("TTS_PED");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Produtos.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODPROD");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DESCPROD");

                    b.Property<int>("Estoque")
                        .HasColumnName("ESTOQUE");

                    b.Property<string>("NCM")
                        .IsRequired()
                        .HasColumnName("NCM");

                    b.Property<string>("Unidade")
                        .IsRequired()
                        .HasColumnName("UNID");

                    b.Property<int>("ValorUnitario")
                        .HasColumnName("VLRUNIT");

                    b.HasKey("Id");

                    b.ToTable("TCS_PRO");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Rastreabilidade.Rastreabilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODRASTRE");

                    b.Property<int>("PedidoCompraId")
                        .HasColumnName("CODPEDC");

                    b.Property<int>("PedidoVendaId")
                        .HasColumnName("CODPEDV");

                    b.Property<int>("ProdutoId")
                        .HasColumnName("CODPROD");

                    b.Property<int>("Quantidade")
                        .HasColumnName("QTD");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("TTS_RASTRE");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Rota.Rota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODROTA");

                    b.Property<int>("EnderecoId")
                        .HasColumnName("CODEND");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("TCS_ROTA_END");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Veiculo.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CODVEI");

                    b.Property<string>("Cor")
                        .HasColumnName("COR");

                    b.Property<string>("Marca")
                        .HasColumnName("MARCA");

                    b.Property<string>("Modelo")
                        .HasColumnName("MODELO");

                    b.Property<int>("ParceiroId");

                    b.Property<string>("Placa")
                        .HasColumnName("PLACA");

                    b.Property<string>("Renavam")
                        .HasColumnName("RENAVAM");

                    b.HasKey("Id");

                    b.HasIndex("ParceiroId");

                    b.ToTable("TCS_VEI");
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Cidade.Cidade", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Estado.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Empresa.Empresa", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Endereco.Endereco", "Endereco")
                        .WithMany("Empresas")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Endereco.Endereco", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Cidade.Cidade", "Cidade")
                        .WithMany("Endereco")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.ItemOrdemCarga.ItemOrdemCarga", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Pedido.Pedido")
                        .WithMany("ItensOrdemCarga")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.ItensPedidos.ItensPedido", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Produtos.Produto", "Produtos")
                        .WithMany("ItensPedido")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Motoristas.Motorista", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Endereco.Endereco", "Endereco")
                        .WithMany("Motorista")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.OrdemCarga.OrdemCarga", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Motoristas.Motorista", "Motorista")
                        .WithMany("OrdemCarga")
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VirtusGo.Core.Domain.Rota.Rota", "Rota")
                        .WithMany("OrdemCarga")
                        .HasForeignKey("RotaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VirtusGo.Core.Domain.Veiculo.Veiculo", "Veiculo")
                        .WithMany("OrdemCarga")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Parceiro.Parceiro", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Endereco.Endereco", "Endereco")
                        .WithMany("Parceiro")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Pedido.Pedido", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Empresa.Empresa", "Empresa")
                        .WithMany("Pedidos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VirtusGo.Core.Domain.Motoristas.Motorista", "Motorista")
                        .WithMany("Pedidos")
                        .HasForeignKey("MotoristaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VirtusGo.Core.Domain.Parceiro.Parceiro", "Parceiro")
                        .WithMany("Pedidos")
                        .HasForeignKey("ParceiroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Rastreabilidade.Rastreabilidade", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Produtos.Produto", "Produtos")
                        .WithMany("Rastreabilidade")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Rota.Rota", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Endereco.Endereco", "Endereco")
                        .WithMany("Rota")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VirtusGo.Core.Domain.Veiculo.Veiculo", b =>
                {
                    b.HasOne("VirtusGo.Core.Domain.Parceiro.Parceiro", "Parceiro")
                        .WithMany("Veiculos")
                        .HasForeignKey("ParceiroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
